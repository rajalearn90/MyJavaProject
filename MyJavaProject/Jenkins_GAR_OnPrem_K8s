pipeline {
    agent any

    tools {
        jdk 'tool-jdk17'
        maven 'tool-maven'
    }
    
     environment{
        SCANNER_HOME= tool 'tool-sonar'
        GOOGLE_APPLICATION_CREDENTIALS="/etc/gcloud/p1_credential.json"
        GCP_PROJECT = 'project1-444610'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/rajalearn90/DevopsJavaProject.git'
            }
        }
        
        
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Trivy Dependency Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analsyis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame -Dsonar.projectKey=BoardGame \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        
        stage('Build') {
            steps {
               sh "mvn package"
            }
        }
        
        stage('GCP Authentication'){
            steps{
                script{
                    
                    // Authenticate with Google Cloud
                    sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
                    sh 'gcloud auth configure-docker us-central1-docker.pkg.dev'
                    sh 'gcloud config set project $GCP_PROJECT'
                }
            }
        }
        
        stage('Build & Tag Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t us-central1-docker.pkg.dev/project1-444610/jenkins-project/boardgame:${BUILD_NUMBER} . '
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html us-central1-docker.pkg.dev/project1-444610/jenkins-project/boardgame:${BUILD_NUMBER} "
            }
        }

        stage('Push to GCR') {
            steps {
                script {
                    // Tag and push the Docker image to GCR
                    //sh 'docker tag gcr.io/us-central1-docker.pkg.dev/project1-444610/jenkins-project/boardgame:${BUILD_NUMBER} . '
                    sh 'docker push us-central1-docker.pkg.dev/project1-444610/jenkins-project/boardgame:${BUILD_NUMBER}'
                }
            }
        }
        
        stage('Deploy To Kubernetes') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-gred', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://10.128.0.12:6443') {
                     sh "kubectl apply -f deployment-service.yaml"
                }               
            }
        }
        
        stage('Verify Deployment in kubernetes') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-gred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://10.128.0.12:6443') {
                     sh "kubectl get pods -n webapps"
                     sh "kubectl get svc -n webapps"
                }               
            }
        }
        
    }
}
